-- =============================================
-- STAGING SETUP & LOAD SCRIPT (SQL Server)
-- Author: ChatGPT (for TrainingData)
-- Description:
--   Creates staging schemas/tables, minimal cleansed staging,
--   and example BULK INSERT/OPENROWSET loads for CSV/XLSX/TXT.
-- =============================================

/* =============================================
   0) (Optional) Create & use database
-- ============================================= */
-- CREATE DATABASE TrainingData;
-- GO
-- USE TrainingData;
-- GO

/* =============================================
   1) Schemas & Audit table
-- ============================================= */
IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE name = 'stg')
    EXEC('CREATE SCHEMA stg');
IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE name = 'stg_c')
    EXEC('CREATE SCHEMA stg_c');  -- cleaned staging
GO

IF OBJECT_ID('stg.Load_Batch_Audit') IS NULL
BEGIN
    CREATE TABLE stg.Load_Batch_Audit
    (
        Load_Batch_ID     UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,
        Source_System     NVARCHAR(200)    NOT NULL,
        Source_File       NVARCHAR(400)    NULL,
        Started_At        DATETIME2(3)     NOT NULL DEFAULT SYSUTCDATETIME(),
        Ended_At          DATETIME2(3)     NULL,
        Rows_Ingested     INT              NULL,
        Status            NVARCHAR(50)     NOT NULL DEFAULT 'Started',  -- Started/Success/Failed
        Error_Message     NVARCHAR(MAX)    NULL
    );
END
GO

/* =============================================
   2) STAGING (RAW) tables
-- ============================================= */

-- 2A. Sales RAW
IF OBJECT_ID('stg.Sales_Raw') IS NULL
BEGIN
    CREATE TABLE stg.Sales_Raw
    (
        OrderID            NVARCHAR(100)  NULL,
        OrderDate          NVARCHAR(100)  NULL,
        ProductID          NVARCHAR(100)  NULL,
        CustomerID         NVARCHAR(100)  NULL,
        StoreID            NVARCHAR(100)  NULL,
        SalesRepID         NVARCHAR(100)  NULL,
        Quantity           NVARCHAR(100)  NULL,
        UnitPrice          NVARCHAR(100)  NULL,
        Discount           NVARCHAR(100)  NULL,

        Load_Batch_ID      UNIQUEIDENTIFIER NOT NULL,
        Source_File        NVARCHAR(400)    NULL,
        Load_Timestamp     DATETIME2(3)     NOT NULL DEFAULT SYSUTCDATETIME()
    );
END
GO

-- 2B. Product RAW
IF OBJECT_ID('stg.Product_Raw') IS NULL
BEGIN
    CREATE TABLE stg.Product_Raw
    (
        ProductID          NVARCHAR(50)    NULL,
        ProductName        NVARCHAR(200)   NULL,
        PricePerUnit       NVARCHAR(100)   NULL,
        CostPerUnit        NVARCHAR(100)   NULL,
        CategoryID         NVARCHAR(50)    NULL,
        Brand              NVARCHAR(100)   NULL,
        SupplierName       NVARCHAR(200)   NULL,

        Load_Batch_ID      UNIQUEIDENTIFIER NOT NULL,
        Source_File        NVARCHAR(400)    NULL,
        Load_Timestamp     DATETIME2(3)     NOT NULL DEFAULT SYSUTCDATETIME()
    );
END
GO

-- 2C. Sales Rep RAW
IF OBJECT_ID('stg.SalesRep_Raw') IS NULL
BEGIN
    CREATE TABLE stg.SalesRep_Raw
    (
        SalesRepID         NVARCHAR(50)    NULL,
        SalesRepName       NVARCHAR(200)   NULL,
        Email              NVARCHAR(200)   NULL,
        Region             NVARCHAR(100)   NULL,

        Load_Batch_ID      UNIQUEIDENTIFIER NOT NULL,
        Source_File        NVARCHAR(400)    NULL,
        Load_Timestamp     DATETIME2(3)     NOT NULL DEFAULT SYSUTCDATETIME()
    );
END
GO

-- 2D. Customer RAW
IF OBJECT_ID('stg.Customer_Raw') IS NULL
BEGIN
    CREATE TABLE stg.Customer_Raw
    (
        CustomerID         NVARCHAR(50)    NULL,
        CustomerName       NVARCHAR(200)   NULL,
        Email              NVARCHAR(200)   NULL,
        Phone              NVARCHAR(100)   NULL,
        City               NVARCHAR(100)   NULL,
        State              NVARCHAR(100)   NULL,
        Country            NVARCHAR(100)   NULL,

        Load_Batch_ID      UNIQUEIDENTIFIER NOT NULL,
        Source_File        NVARCHAR(400)    NULL,
        Load_Timestamp     DATETIME2(3)     NOT NULL DEFAULT SYSUTCDATETIME()
    );
END
GO

-- 2E. Store RAW
IF OBJECT_ID('stg.Store_Raw') IS NULL
BEGIN
    CREATE TABLE stg.Store_Raw
    (
        StoreID            NVARCHAR(50)    NULL,
        StoreName          NVARCHAR(200)   NULL,
        Address            NVARCHAR(300)   NULL,
        City               NVARCHAR(100)   NULL,
        State              NVARCHAR(100)   NULL,
        Country            NVARCHAR(100)   NULL,

        Load_Batch_ID      UNIQUEIDENTIFIER NOT NULL,
        Source_File        NVARCHAR(400)    NULL,
        Load_Timestamp     DATETIME2(3)     NOT NULL DEFAULT SYSUTCDATETIME()
    );
END
GO

-- 2F. Marketing Spend RAW
IF OBJECT_ID('stg.MarketingSpend_Raw') IS NULL
BEGIN
    CREATE TABLE stg.MarketingSpend_Raw
    (
        SpendDate          NVARCHAR(100)   NULL,
        Channel            NVARCHAR(100)   NULL,
        Campaign           NVARCHAR(200)   NULL,
        Amount             NVARCHAR(100)   NULL,
        Notes              NVARCHAR(400)   NULL,

        Load_Batch_ID      UNIQUEIDENTIFIER NOT NULL,
        Source_File        NVARCHAR(400)    NULL,
        Load_Timestamp     DATETIME2(3)     NOT NULL DEFAULT SYSUTCDATETIME()
    );
END
GO

-- 2G. Public Holidays RAW
IF OBJECT_ID('stg.PublicHoliday_Raw') IS NULL
BEGIN
    CREATE TABLE stg.PublicHoliday_Raw
    (
        HolidayDate        NVARCHAR(100)   NULL,
        HolidayName        NVARCHAR(200)   NULL,
        State              NVARCHAR(100)   NULL,
        IsNational         NVARCHAR(50)    NULL,

        Load_Batch_ID      UNIQUEIDENTIFIER NOT NULL,
        Source_File        NVARCHAR(400)    NULL,
        Load_Timestamp     DATETIME2(3)     NOT NULL DEFAULT SYSUTCDATETIME()
    );
END
GO

-- 2H. Discontinued Product RAW
IF OBJECT_ID('stg.DiscontinuedProduct_Raw') IS NULL
BEGIN
    CREATE TABLE stg.DiscontinuedProduct_Raw
    (
        ProductID          NVARCHAR(50)    NULL,
        DiscontinuedDate   NVARCHAR(100)   NULL,
        Reason             NVARCHAR(200)   NULL,

        Load_Batch_ID      UNIQUEIDENTIFIER NOT NULL,
        Source_File        NVARCHAR(400)    NULL,
        Load_Timestamp     DATETIME2(3)     NOT NULL DEFAULT SYSUTCDATETIME()
    );
END
GO

-- 2I. New Product Update RAW
IF OBJECT_ID('stg.NewProductUpdate_Raw') IS NULL
BEGIN
    CREATE TABLE stg.NewProductUpdate_Raw
    (
        ProductID          NVARCHAR(50)    NULL,
        ProductName        NVARCHAR(200)   NULL,
        PricePerUnit       NVARCHAR(100)   NULL,
        CostPerUnit        NVARCHAR(100)   NULL,
        CategoryID         NVARCHAR(50)    NULL,
        Brand              NVARCHAR(100)   NULL,
        SupplierName       NVARCHAR(200)   NULL,

        Load_Batch_ID      UNIQUEIDENTIFIER NOT NULL,
        Source_File        NVARCHAR(400)    NULL,
        Load_Timestamp     DATETIME2(3)     NOT NULL DEFAULT SYSUTCDATETIME()
    );
END
GO

/* =============================================
   3) STAGING (CLEANSED MINIMUM) tables
-- ============================================= */

-- 3A. Sales (cleansed)
IF OBJECT_ID('stg_c.Sales') IS NULL
BEGIN
    CREATE TABLE stg_c.Sales
    (
        OrderID        BIGINT          NOT NULL,
        OrderDate      DATE            NOT NULL,
        ProductID      NVARCHAR(50)    NOT NULL,
        CustomerID     NVARCHAR(50)    NOT NULL,
        StoreID        NVARCHAR(50)    NULL,
        SalesRepID     NVARCHAR(50)    NULL,
        Quantity       INT             NOT NULL,
        UnitPrice      DECIMAL(18,2)   NOT NULL,
        Discount       DECIMAL(9,4)    NULL,
        Load_Batch_ID  UNIQUEIDENTIFIER NOT NULL,
        Load_Timestamp DATETIME2(3)     NOT NULL
    );
END
GO

-- 3B. Product (cleansed)
IF OBJECT_ID('stg_c.Product') IS NULL
BEGIN
    CREATE TABLE stg_c.Product
    (
        ProductID      NVARCHAR(50)   NOT NULL,
        ProductName    NVARCHAR(200)  NOT NULL,
        PricePerUnit   DECIMAL(18,2)  NULL,
        CostPerUnit    DECIMAL(18,2)  NULL,
        CategoryID     NVARCHAR(50)   NULL,
        Brand          NVARCHAR(100)  NULL,
        SupplierName   NVARCHAR(200)  NULL,
        Load_Batch_ID  UNIQUEIDENTIFIER NOT NULL,
        Load_Timestamp DATETIME2(3)     NOT NULL
    );
END
GO

-- 3C. Customer (cleansed)
IF OBJECT_ID('stg_c.Customer') IS NULL
BEGIN
    CREATE TABLE stg_c.Customer
    (
        CustomerID     NVARCHAR(50)    NOT NULL,
        CustomerName   NVARCHAR(200)   NOT NULL,
        Email          NVARCHAR(200)   NULL,
        Phone          NVARCHAR(100)   NULL,
        City           NVARCHAR(100)   NULL,
        State          NVARCHAR(100)   NULL,
        Country        NVARCHAR(100)   NULL,
        Load_Batch_ID  UNIQUEIDENTIFIER NOT NULL,
        Load_Timestamp DATETIME2(3)     NOT NULL
    );
END
GO

/* =============================================
   4) LOAD EXAMPLES: CSV via BULK INSERT
   Adjust file paths to your environment.
-- ============================================= */

-- Sales 2024
DECLARE @batch UNIQUEIDENTIFIER = NEWID();
INSERT INTO stg.Load_Batch_Audit (Load_Batch_ID, Source_System, Source_File)
VALUES (@batch, 'CSV', 'C:\SQLData\Landing\sales_data_2024.csv');

BULK INSERT stg.Sales_Raw
FROM 'C:\SQLData\Landing\sales_data_2024.csv'
WITH (
    FORMAT='CSV',
    FIRSTROW = 2,
    FIELDTERMINATOR = ',',
    ROWTERMINATOR   = '0x0a',
    TABLOCK
);
UPDATE stg.Sales_Raw
SET Load_Batch_ID=@batch, Source_File='C:\SQLData\Landing\sales_data_2024.csv'
WHERE Load_Batch_ID IS NULL;

-- Sales 2022
DECLARE @batch2022 UNIQUEIDENTIFIER = NEWID();
INSERT INTO stg.Load_Batch_Audit (Load_Batch_ID, Source_System, Source_File)
VALUES (@batch2022, 'CSV', 'C:\SQLData\Landing\sales_data_2022.csv');

BULK INSERT stg.Sales_Raw
FROM 'C:\SQLData\Landing\sales_data_2022.csv'
WITH (FORMAT='CSV', FIRSTROW=2, FIELDTERMINATOR=',', ROWTERMINATOR='0x0a', TABLOCK);
UPDATE stg.Sales_Raw
SET Load_Batch_ID=@batch2022, Source_File='C:\SQLData\Landing\sales_data_2022.csv'
WHERE Load_Batch_ID IS NULL;

-- Sales 2023
DECLARE @batch2023 UNIQUEIDENTIFIER = NEWID();
INSERT INTO stg.Load_Batch_Audit (Load_Batch_ID, Source_System, Source_File)
VALUES (@batch2023, 'CSV', 'C:\SQLData\Landing\sales_data_2023.csv');

BULK INSERT stg.Sales_Raw
FROM 'C:\SQLData\Landing\sales_data_2023.csv'
WITH (FORMAT='CSV', FIRSTROW=2, FIELDTERMINATOR=',', ROWTERMINATOR='0x0a', TABLOCK);
UPDATE stg.Sales_Raw
SET Load_Batch_ID=@batch2023, Source_File='C:\SQLData\Landing\sales_data_2023.csv'
WHERE Load_Batch_ID IS NULL;

-- Customer
DECLARE @batchCust UNIQUEIDENTIFIER = NEWID();
INSERT INTO stg.Load_Batch_Audit (Load_Batch_ID, Source_System, Source_File)
VALUES (@batchCust, 'CSV', 'C:\SQLData\Landing\Customer Data.csv');

BULK INSERT stg.Customer_Raw
FROM 'C:\SQLData\Landing\Customer Data.csv'
WITH (FORMAT='CSV', FIRSTROW=2, FIELDTERMINATOR=',', ROWTERMINATOR='0x0a', TABLOCK);
UPDATE stg.Customer_Raw
SET Load_Batch_ID=@batchCust, Source_File='C:\SQLData\Landing\Customer Data.csv'
WHERE Load_Batch_ID IS NULL;

-- Marketing Spend
DECLARE @batchMkt UNIQUEIDENTIFIER = NEWID();
INSERT INTO stg.Load_Batch_Audit (Load_Batch_ID, Source_System, Source_File)
VALUES (@batchMkt, 'CSV', 'C:\SQLData\Landing\marketing_spend_sample.csv');

BULK INSERT stg.MarketingSpend_Raw
FROM 'C:\SQLData\Landing\marketing_spend_sample.csv'
WITH (FORMAT='CSV', FIRSTROW=2, FIELDTERMINATOR=',', ROWTERMINATOR='0x0a', TABLOCK);
UPDATE stg.MarketingSpend_Raw
SET Load_Batch_ID=@batchMkt, Source_File='C:\SQLData\Landing\marketing_spend_sample.csv'
WHERE Load_Batch_ID IS NULL;

-- Public Holidays
DECLARE @batchPH UNIQUEIDENTIFIER = NEWID();
INSERT INTO stg.Load_Batch_Audit (Load_Batch_ID, Source_System, Source_File)
VALUES (@batchPH, 'CSV', 'C:\SQLData\Landing\malaysia_public_holidays_2022_2024.csv');

BULK INSERT stg.PublicHoliday_Raw
FROM 'C:\SQLData\Landing\malaysia_public_holidays_2022_2024.csv'
WITH (FORMAT='CSV', FIRSTROW=2, FIELDTERMINATOR=',', ROWTERMINATOR='0x0a', TABLOCK);
UPDATE stg.PublicHoliday_Raw
SET Load_Batch_ID=@batchPH, Source_File='C:\SQLData\Landing\malaysia_public_holidays_2022_2024.csv'
WHERE Load_Batch_ID IS NULL;

 /* =============================================
   5) LOAD EXAMPLES: Excel via OPENROWSET (optional)
   Requires Microsoft.ACE.OLEDB driver and Ad Hoc Distributed Queries enabled.
-- ============================================= */

-- Enable Ad Hoc (run once per server)
-- EXEC sp_configure 'show advanced options', 1; RECONFIGURE;
-- EXEC sp_configure 'Ad Hoc Distributed Queries', 1; RECONFIGURE;

-- Product from Excel (sheet 'Products$')
-- DECLARE @batchProd UNIQUEIDENTIFIER = NEWID();
-- INSERT INTO stg.Load_Batch_Audit (Load_Batch_ID, Source_System, Source_File)
-- VALUES (@batchProd, 'Excel', 'C:\SQLData\Landing\Product & Sales Rep Data.xlsx');
-- INSERT INTO stg.Product_Raw
--     (ProductID, ProductName, PricePerUnit, CostPerUnit, CategoryID, Brand, SupplierName, Load_Batch_ID, Source_File)
-- SELECT ProductID, ProductName, PricePerUnit, CostPerUnit, CategoryID, Brand, SupplierName, @batchProd, 'C:\SQLData\Landing\Product & Sales Rep Data.xlsx'
-- FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0',
--                 'Excel 12.0;HDR=YES;IMEX=1;Database=C:\SQLData\Landing\Product & Sales Rep Data.xlsx',
--                 'SELECT * FROM [Products$]');

/* =============================================
   6) LOAD EXAMPLES: TXT (tab-delimited)
-- ============================================= */
DECLARE @batchNew UNIQUEIDENTIFIER = NEWID();
INSERT INTO stg.Load_Batch_Audit (Load_Batch_ID, Source_System, Source_File)
VALUES (@batchNew, 'TXT', 'C:\SQLData\Landing\New Product Update.txt');

BULK INSERT stg.NewProductUpdate_Raw
FROM 'C:\SQLData\Landing\New Product Update.txt'
WITH (
    FIRSTROW = 2,
    FIELDTERMINATOR = '\t',
    ROWTERMINATOR   = '0x0a',
    TABLOCK
);
UPDATE stg.NewProductUpdate_Raw
SET Load_Batch_ID=@batchNew, Source_File='C:\SQLData\Landing\New Product Update.txt'
WHERE Load_Batch_ID IS NULL;

 /* =============================================
   7) Minimal Transform: RAW -> CLEANSING
-- ============================================= */

-- Sales to stg_c.Sales
INSERT INTO stg_c.Sales
(
    OrderID, OrderDate, ProductID, CustomerID, StoreID, SalesRepID,
    Quantity, UnitPrice, Discount, Load_Batch_ID, Load_Timestamp
)
SELECT
    TRY_CONVERT(BIGINT, OrderID)                         AS OrderID,
    TRY_CONVERT(DATE,   OrderDate, 103)                  AS OrderDate, -- 103=dd/mm/yyyy
    ProductID,
    CustomerID,
    StoreID,
    SalesRepID,
    TRY_CONVERT(INT, Quantity)                           AS Quantity,
    TRY_CONVERT(DECIMAL(18,2), UnitPrice)                AS UnitPrice,
    TRY_CONVERT(DECIMAL(9,4),  NULLIF(Discount,''))      AS Discount,
    Load_Batch_ID,
    Load_Timestamp
FROM stg.Sales_Raw
WHERE TRY_CONVERT(BIGINT, OrderID) IS NOT NULL
  AND TRY_CONVERT(DATE,   OrderDate, 103) IS NOT NULL
  AND TRY_CONVERT(INT,    Quantity) > 0
  AND TRY_CONVERT(DECIMAL(18,2), UnitPrice) IS NOT NULL;

-- Product to stg_c.Product
INSERT INTO stg_c.Product
(
    ProductID, ProductName, PricePerUnit, CostPerUnit, CategoryID, Brand, SupplierName,
    Load_Batch_ID, Load_Timestamp
)
SELECT
    ProductID,
    ProductName,
    TRY_CONVERT(DECIMAL(18,2), PricePerUnit),
    TRY_CONVERT(DECIMAL(18,2), CostPerUnit),
    CategoryID,
    Brand,
    SupplierName,
    Load_Batch_ID,
    Load_Timestamp
FROM stg.Product_Raw
WHERE ProductID IS NOT NULL AND ProductName IS NOT NULL;

-- Customer to stg_c.Customer
INSERT INTO stg_c.Customer
(
    CustomerID, CustomerName, Email, Phone, City, State, Country,
    Load_Batch_ID, Load_Timestamp
)
SELECT
    CustomerID,
    CustomerName,
    NULLIF(Email,''),
    NULLIF(Phone,''),
    City, State, Country,
    Load_Batch_ID, Load_Timestamp
FROM stg.Customer_Raw
WHERE CustomerID IS NOT NULL AND CustomerName IS NOT NULL;

-- (Optional) Mark audit as Success for completed batches
UPDATE a
SET Status = 'Success',
    Ended_At = SYSUTCDATETIME()
FROM stg.Load_Batch_Audit a
WHERE a.Status <> 'Success'
  AND a.Load_Batch_ID IN (
        SELECT DISTINCT Load_Batch_ID FROM stg_c.Sales
        UNION SELECT DISTINCT Load_Batch_ID FROM stg_c.Product
        UNION SELECT DISTINCT Load_Batch_ID FROM stg_c.Customer
  );

/* =============================================
   8) Re-run pattern (truncate staging)
-- ============================================= */
-- TRUNCATE TABLE stg.Sales_Raw;
-- TRUNCATE TABLE stg.Customer_Raw;
-- TRUNCATE TABLE stg.Product_Raw;
-- TRUNCATE TABLE stg.Store_Raw;
-- TRUNCATE TABLE stg.MarketingSpend_Raw;
-- TRUNCATE TABLE stg.PublicHoliday_Raw;
-- TRUNCATE TABLE stg.DiscontinuedProduct_Raw;
-- TRUNCATE TABLE stg.NewProductUpdate_Raw;

-- TRUNCATE TABLE stg_c.Sales;
-- TRUNCATE TABLE stg_c.Product;
-- TRUNCATE TABLE stg_c.Customer;

-- End of Script
